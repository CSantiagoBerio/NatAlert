Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR
    COMMA
    COMMENT
    CREATE
    DECLARATION
    DOT
    DOUBLE
    ELSE
    ENDLINE
    EVENT
    FOR
    GET
    IF
    LOCATION
    METHOD
    NOTIFY
    SENDTO
    SET
    THEN
    TYPE
    WHILE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> NUMBER
Rule 2     expression -> QUOTE expression QUOTE
Rule 3     declaration -> LET IDENTIFIER ASSIGN expression
Rule 4     expression -> INITUI LParen RParen
Rule 5     expression -> INITDB LParen RParen

Terminals, with rules where they appear

ASSIGN               : 3
CHAR                 : 
COMMA                : 
COMMENT              : 
CREATE               : 
DECLARATION          : 
DOT                  : 
DOUBLE               : 
ELSE                 : 
ENDLINE              : 
EVENT                : 
FOR                  : 
GET                  : 
IDENTIFIER           : 3
IF                   : 
INITDB               : 5
INITUI               : 4
LET                  : 3
LOCATION             : 
LParen               : 4 5
METHOD               : 
NOTIFY               : 
NUMBER               : 1
QUOTE                : 2 2
RParen               : 4 5
SENDTO               : 
SET                  : 
THEN                 : 
TYPE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

declaration          : 
expression           : 2 3 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . NUMBER
    (2) expression -> . QUOTE expression QUOTE
    (4) expression -> . INITUI LParen RParen
    (5) expression -> . INITDB LParen RParen

    NUMBER          shift and go to state 2
    QUOTE           shift and go to state 3
    INITUI          shift and go to state 4
    INITDB          shift and go to state 5

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> NUMBER .

    $end            reduce using rule 1 (expression -> NUMBER .)
    QUOTE           reduce using rule 1 (expression -> NUMBER .)


state 3

    (2) expression -> QUOTE . expression QUOTE
    (1) expression -> . NUMBER
    (2) expression -> . QUOTE expression QUOTE
    (4) expression -> . INITUI LParen RParen
    (5) expression -> . INITDB LParen RParen

    NUMBER          shift and go to state 2
    QUOTE           shift and go to state 3
    INITUI          shift and go to state 4
    INITDB          shift and go to state 5

    expression                     shift and go to state 6

state 4

    (4) expression -> INITUI . LParen RParen

    LParen          shift and go to state 7


state 5

    (5) expression -> INITDB . LParen RParen

    LParen          shift and go to state 8


state 6

    (2) expression -> QUOTE expression . QUOTE

    QUOTE           shift and go to state 9


state 7

    (4) expression -> INITUI LParen . RParen

    RParen          shift and go to state 10


state 8

    (5) expression -> INITDB LParen . RParen

    RParen          shift and go to state 11


state 9

    (2) expression -> QUOTE expression QUOTE .

    $end            reduce using rule 2 (expression -> QUOTE expression QUOTE .)
    QUOTE           reduce using rule 2 (expression -> QUOTE expression QUOTE .)


state 10

    (4) expression -> INITUI LParen RParen .

    $end            reduce using rule 4 (expression -> INITUI LParen RParen .)
    QUOTE           reduce using rule 4 (expression -> INITUI LParen RParen .)


state 11

    (5) expression -> INITDB LParen RParen .

    $end            reduce using rule 5 (expression -> INITDB LParen RParen .)
    QUOTE           reduce using rule 5 (expression -> INITDB LParen RParen .)

